// Library for nz-server

function nzlib() {}

nzlib.HMAC = async function HMAC(key, message) {
	const g = str => new Uint8Array([...unescape(encodeURIComponent(str))].map(c => c.charCodeAt(0))),
	k = g(key),
	m = g(message),
	c = await crypto.subtle.importKey('raw', k, { name: 'HMAC', hash: 'SHA-512' }, true, ['sign']),
	s = await crypto.subtle.sign('HMAC', c, m);
	return btoa(String.fromCharCode(...new Uint8Array(s)))
}

nzlib.hasJsonStructure = function hasJsonStructure(str) {
    if (typeof str !== 'string') return false;
    try {
        const result = JSON.parse(str);
        const type = Object.prototype.toString.call(result);
        return type === '[object Object]' 
            || type === '[object Array]';
    } catch (err) {
        return false;
    }
}

nzlib.XHR = async function xhr(method = 'GET', url = 'https://google.com', data = new Object({request:'ping'})) {
	return new Promise((resolve, reject) => {
		let xhr = new XMLHttpRequest();
		xhr.open(method, url);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.responseType = 'json';
		(method == 'POST') ? xhr.send(JSON.stringify(data)) : xhr.send();
		xhr.onload = (event) => {
			if (xhr.status != 200) {
				reject(`Error ${xhr.status}: ${xhr.statusText}`);
			} else {
				console.log(`Done! Received ${event.loaded} bytes`);
				resolve(xhr.response);
			}
		}
		xhr.onerror = () => {
			reject('Error!');
		}
		xhr.onprogress = (event) => {
			if (event.lengthComputable) {
				console.log(`Received ${event.loaded} of ${event.total} bytes`);
			} else {
				console.log(`Received ${event.loaded} bytes`);
			}
		};
	});
}

module.exports = nzlib;